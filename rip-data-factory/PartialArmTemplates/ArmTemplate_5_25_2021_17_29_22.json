{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "rip-data-factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HttpToAdls",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "HttpSource",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ADLSSink",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "ExampleDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "HttpToAdls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExampleDataFlow",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "ADLSSink",
									"type": "LinkedServiceReference"
								},
								"folderPath": "data/dw-storage"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ExampleDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquet",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExampleDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLSSink",
								"type": "DatasetReference"
							},
							"name": "ADLSSink"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference"
							},
							"name": "SynapseSink"
						},
						{
							"dataset": {
								"referenceName": "ADLSParquet",
								"type": "DatasetReference"
							},
							"name": "ADLSSyncStep"
						}
					],
					"transformations": [
						{
							"name": "SelectTest"
						},
						{
							"name": "FilterTest"
						},
						{
							"name": "WithPrimGenre"
						},
						{
							"name": "WindowFunction"
						},
						{
							"name": "AggregateExample"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tlimit: 100,\n\twildcardPaths:['output']) ~> ADLSSink\nADLSSink select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\t{Rotten Tomato} = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTest\nSelectTest filter(toInteger(year) >1951) ~> FilterTest\nFilterTest derive(PrimaryGenre = iif (instr(genres, '|') == 0, genres, substring(genres,1,instr(genres, '|') - 1)),\n\t\tRottenTomato = toInteger({Rotten Tomato})) ~> WithPrimGenre\nWithPrimGenre window(over(year,\n\t\tPrimaryGenre),\n\tasc(RottenTomato, true),\n\tRatingsRank = rank()) ~> WindowFunction\nWindowFunction aggregate(groupBy(PrimaryGenre,\n\t\tyear),\n\tAverageRating = avg(RottenTomato),\n\t\tHighestRated = first(title),\n\t\tLowestRated = last(title),\n\t\tNumberOfMovies = count()) ~> AggregateExample\nAggregateExample alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SynapseSink\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ADLSSyncStep"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLSParquet')]"
			]
		}
	]
}